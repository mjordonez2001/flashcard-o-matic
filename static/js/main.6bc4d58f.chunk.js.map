{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/Home/Deck.js","Layout/Home/DeckList.js","Layout/Study/Card.js","Layout/Study/Study.js","Layout/CreateDeck/CreateDeck.js","Layout/Deck/Card.js","Layout/Deck/CardsList.js","Layout/Deck/Deck.js","Layout/EditDeck/EditDeck.js","Layout/ModifyCard/Form.js","Layout/ModifyCard/EditCard.js","Layout/ModifyCard/AddCard.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","readCard","cardId","append","Deck","deckLength","length","description","to","type","onClick","window","confirm","location","reload","Decks","useState","decks","setDecks","useEffect","abortController","AbortController","log","loadDecks","abort","allDecks","map","index","Card","nextButton","cardIndex","setCardIndex","cardDisplay","setCardDisplay","flipped","setFlipped","history","useHistory","front","currentID","push","back","Study","useParams","setDeck","loadDeck","CreateDeck","initialDeckData","deckData","setDeckData","handleChange","target","value","onSubmit","event","preventDefault","createDeck","htmlFor","onChange","placeholder","CardsList","allCards","i","title","EditDeck","updateDeck","Form","cardFront","cardBack","formType","initialCardData","cardData","setCardData","createCard","EditCard","params","setCard","loadCard","AddCard","Layout","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6bc4d58f.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\n// error path page\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:8080\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, {  } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { deleteDeck } from \"../../utils/api\";\n\n// home page deck component\nfunction Deck( { deck } ) {\n\n    // deckLength is used to see the number of cards. makes sure the deck is valid before reading the length\n    let deckLength = 0;\n    if (deck.cards && deck.cards.length) deckLength = deck.cards.length;\n\n    // deletes card upon clicking the delete button and then reloads the page\n    const deleteHandler = () => {\n        if (window.confirm(\"Delete this deck? \\n\\nYou will not be able to recover it\")) {\n            deleteDeck(deck.id);\n            window.location.reload();\n        }\n    }\n\n    // html\n    return (\n        <div className=\"card my-2\">\n            <div className=\"card-body\">\n                <div className=\"d-flex flex-row justify-content-between\">\n                    <h5 className=\"card-title\">{deck.name}</h5>\n                    <p className=\"card-text\"><small className=\"text-muted\">{deckLength} cards</small></p>\n                </div>\n                <p className=\"card-text\">{deck.description}</p>\n                <div className=\"d-flex flex-row justify-content-between\">\n                    <div>\n                        <Link to={`/decks/${deck.id}`} className=\"btn btn-secondary mx-2\">View</Link>\n                        <Link to={`/decks/${deck.id}/study`}className=\"btn btn-primary mx-2\">Study</Link>\n                    </div>\n                    <button type=\"button\" className=\"btn btn-danger mx-2\" onClick={deleteHandler}>Delete</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Deck;","import React, { useState, useEffect } from \"react\";\nimport { listDecks } from \"../../utils/api\";\nimport { Link } from \"react-router-dom\";\nimport Deck from \"./Deck\";\n\n// lists all the decks in the home page\nfunction Decks() {\n    // creates a state for all the decks\n    const [decks, setDecks] = useState([]);\n\n    // loads all decks\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        async function loadDecks() {\n            try {\n                const response = await listDecks();\n                setDecks(response);\n            } catch(error) {\n                console.log(error);\n            }\n        }\n\n        loadDecks();\n        return () => abortController.abort();\n    }, []);\n\n\n    // maps all decks into the Deck component\n    const allDecks = decks.map((deck, index) => {\n        return (\n            <Deck deck={deck} key={index} />\n        );\n    })\n\n    // loading screen\n    if (!decks.length) {\n        return (\n            <h1>Loading...</h1>\n        )\n    }\n\n    // html\n    return (\n        <div>\n            <Link to=\"/decks/new\" className=\"btn btn-secondary my-2\">+ Create Deck</Link>\n            {allDecks}\n        </div>\n    );\n}\n\nexport default Decks;","import React, { useState, useEffect } from \"react\";\nimport { useHistory, Link } from \"react-router-dom\";\n\n// card component for study page\nfunction Card({deck, deckLength}) {\n    \n    // creates state for the current card index, the current card display, and if the card is flipped or not\n    const [cardIndex, setCardIndex] = useState(0);\n    const [cardDisplay, setCardDisplay] = useState(\"\");\n    const [flipped, setFlipped] = useState(false);\n    const history = useHistory();\n\n    // makes sure the deck is valid and sets the card display to the front of card upon loading\n    useEffect(() => {\n        if (!deck.cards || !deck.cards.length) return;\n        setCardDisplay(deck.cards[cardIndex].front);\n    }, [deck, cardIndex]);\n\n    // if there are less than 3 cards, displays a message telling the user they need to add more cards to study\n    if (deckLength < 3) {\n        return (\n            <div>\n                <h4>Not enough cards.</h4>\n                <p>You need at least 3 cards to study. There are {deckLength} cards in this deck.</p>\n                <Link to={`/decks/${deck.id}/cards/new`} className=\"btn btn-primary\">+ Add Cards</Link>\n            </div>\n        )\n    }\n\n    // handles flip\n    const flipHandler = () => {\n        // when the card is flipped, it sets the display to the front/back of the card\n        if (cardDisplay === deck.cards[cardIndex].front) {\n            setCardDisplay(deck.cards[cardIndex].back);\n        } else {\n            setCardDisplay(deck.cards[cardIndex].front);\n        }\n\n        // used to know if the user can move on to the next card\n        if (!flipped) {\n            setFlipped(true);\n        }\n        \n    }\n\n    // handles next card\n    const nextHandler = () => {\n        // when the user clicks on the next card, it increases the card index by one\n        if (cardIndex < deck.cards.length-1) {\n            setCardIndex((currentID) => currentID + 1);\n        }  else {\n            // if there are no more cards left, prompts the user to restart the stack or go to the home page\n            if (window.confirm(\"Restart cards? \\n\\nClick 'cancel' to return to the home page.\")) {\n                setCardIndex(0);\n            } else {\n                history.push(\"/\");\n            }\n        }\n\n        // used to know if the user can go to the next card\n        setFlipped(false);\n    }\n\n    // creates a button variable that only shows if the user has already flipped the current card\n    let nextButton;\n    if (flipped) {\n        nextButton = (<button className=\"btn btn-primary\" onClick={nextHandler}>Next</button>);\n    }\n\n    //html\n    return (\n        <div className=\"card\">\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">Card {cardIndex+1} of {deckLength}</h5>\n                <p className=\"card-text\">{cardDisplay}</p>\n                <div>\n                    <button className=\"btn btn-secondary mx-2\" onClick={flipHandler}>Flip</button>\n                    {nextButton}\n                </div>\n            </div>\n        </div>\n    ) \n    \n}\n\nexport default Card;","import React, { useEffect, useState } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api\";\nimport Card from \"./Card\";\n\n// study page\nfunction Study() {\n    // crates deckId based on params that is used in useEffect\n    const params = useParams();\n    const deckId = params.deckId;\n\n    // creates a state for the current deck\n    const [deck, setDeck] = useState({});\n\n    // loads the current deck\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        async function loadDeck() {\n            try {\n                const response = await readDeck(deckId);\n                setDeck(response);\n            } catch (error) {\n                console.log(error);\n            }\n        }\n\n        loadDeck();\n        return () => abortController.abort();\n    }, [deckId])\n\n    // loading screen\n    if (!deck.cards) {\n        return (\n            <h1>Loading...</h1>\n        )\n    }\n\n    // makes sure the deck has cards to use deckLength for the number of cards in the deck\n    let deckLength = 0;\n    if (deck.cards && deck.cards.length) deckLength = deck.cards.length;\n\n    // html\n    return (\n        <div>\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\"><Link to=\"/\">Home</Link></li>\n                    <li className=\"breadcrumb-item\"><Link to={`/decks/${deck.id}`}>{deck.name}</Link></li>\n                    <li className=\"breadcrumb-item active\">Study</li>\n                </ol>\n            </nav>\n            <h3 className=\"my-3\">Study: {deck.name}</h3>\n            <Card deck={deck} deckLength={deckLength}/>\n        </div>\n    )\n}\n\nexport default Study;","import React, {useState} from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { createDeck } from \"../../utils/api\";\n\n// creates a new deck\nfunction CreateDeck() {\n\n    // initializes the form data for deckData state\n    const initialDeckData = {\n        name: \"\",\n        description: \"\"\n    }\n    const [deckData, setDeckData] = useState({...initialDeckData});\n    const history = useHistory();\n\n    // updates deckData on change\n    const handleChange = ({target}) => {\n        setDeckData({\n            ...deckData,\n            [target.name]: target.value\n        });\n    }\n\n    // creates a new deck based on deckData, resets the form, and takes user back to home screen\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        createDeck(deckData);\n\n        setDeckData({...initialDeckData});\n        history.push(`/`);\n    }\n\n    // html\n    return (\n        <div>\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\"><Link to=\"/\">Home</Link></li>\n                    <li className=\"breadcrumb-item active\">Create Deck</li>\n                </ol>\n            </nav>\n            <h3>Create Deck</h3>\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Name</label>\n                    <input \n                        type=\"text\" \n                        className=\"form-control\" \n                        id=\"name\" \n                        name=\"name\"\n                        value={deckData.name}\n                        onChange={handleChange}\n                        placeholder=\"Deck Name\" />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"description\">Description</label>\n                    <textarea \n                        className=\"form-control\" \n                        id=\"description\" \n                        name=\"description\"\n                        value={deckData.description}\n                        onChange={handleChange}\n                        placeholder=\"Brief description of the deck\" />\n                </div>\n                <div className=\"d-flex flex-row\">\n                    <Link to=\"\" className=\"btn btn-secondary mr-2\">Cancel</Link>\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default CreateDeck;","import React from \"react\";\nimport { Link } from \"react-router-dom\"\n\n// a single card component\nfunction Card( { card, deckId } ) {\n\n    // TODO: delete the card when user clicks delete button\n\n    // deletes card if user clicks delete button\n    const deleteHandler = () => {\n        window.confirm(\"Delete this card? \\n\\nYou will not be able to recover it\");\n    }\n\n    // html\n    return (\n        <div className=\"card my-2 p-3\">\n            <div className=\"d-flex flex-row justify-content-between\">\n                <div className=\"card-text col-5\">{card.front}</div>\n                <div className=\"card-text col-5\">{card.back}</div>\n            </div>\n            <div className=\"d-flex flex-row justify-content-end mt-3\">\n                <Link to={`/decks/${deckId}/cards/${card.id}/edit`} className=\"btn btn-secondary mr-2\">Edit</Link>\n                <button className=\"btn btn-danger mr-2\" onClick={deleteHandler}>Delete</button>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\n// the list of cards in the deck screen\nfunction CardsList( { cards = [], deckId} ) {\n\n    // makes sure there are cards, and then maps all cards as a Card component\n    const allCards = !!cards.length && cards.map((card, i) => {\n        // makes sure the card is valid\n        if (!card || !card.id) return null;\n\n        // returns Card component\n        return <Card key={i} card={card} deckId={deckId}/>\n    })\n\n    // html\n    return (\n        <div>\n            {allCards}\n        </div>\n    )\n}\n\nexport default CardsList;","import React, { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api\";\nimport CardsList from \"./CardsList\";\nimport { deleteDeck } from \"../../utils/api\";\nimport { useHistory } from \"react-router-dom\";\n\n// deck screen\nfunction Deck() {\n\n    // sets the deckId used in loading the deck, and creates a state for the deck\n    const params = useParams();\n    const deckId = params.deckId;\n    const [deck, setDeck] = useState({});\n    const history = useHistory();\n\n    // loads deck\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        async function loadDeck() {\n            try {\n                const response = await readDeck(deckId);\n                setDeck(response);\n            } catch(error) {\n                console.log(error);\n            }\n        }\n\n        loadDeck();\n        return () => abortController.abort();\n    }, [deckId])\n\n    // deletes deck if user clicks delete button, and then takes user back to home screen\n    const deleteHandler = () => {\n        if (window.confirm(\"Delete this deck? \\n\\nYou will not be able to recover it\")) {\n            deleteDeck(deck.id);\n            history.push(\"/\");\n        }\n    }\n\n    // loading screen\n    if (!deck.cards) {\n        return (\n            <h1>Loading...</h1>\n        )\n    }\n\n    // sets the tile to \"No Cards\" if there are no cards in the deck, otherwise it's \"Cards\"\n    let title = \"\";\n    if (deck.cards && deck.cards.length) {\n        title = \"Cards\";\n    } else {\n        title = \"No Cards\";\n    }\n\n    // html\n    return (\n        <div>\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\"><Link to=\"/\">Home</Link></li>\n                    <li className=\"breadcrumb-item active\">{deck.name}</li>\n                </ol>\n            </nav>\n            <h4>{deck.name}</h4>\n            <p>{deck.description}</p>\n            <div className=\"d-flex flex-row justify-content-between mb-5\">\n                <div>\n                    <Link to={`/decks/${deck.id}/edit`} className=\"btn btn-secondary\">Edit</Link>\n                    <Link to={`/decks/${deck.id}/study`} className=\"btn btn-primary mx-2\">Study</Link>\n                    <Link to={`/decks/${deck.id}/cards/new`} className=\"btn btn-primary\">Add Cards</Link>\n                </div>\n                <button type=\"button\" className=\"btn btn-danger\" onClick={deleteHandler}>Delete</button>\n            </div>\n            <h3>{title}</h3>\n            <CardsList cards={deck.cards} deckId={deckId}/>\n        </div>\n    )\n}\n\nexport default Deck;","import React, { useState, useEffect } from \"react\";\nimport { useParams, Link, useHistory } from \"react-router-dom\"\nimport { readDeck } from \"../../utils/api\";\nimport { updateDeck } from \"../../utils/api\";\n\n// edits the selected deck\nfunction EditDeck() {\n\n    // TODO: make sure the form values start with the current deck data\n\n    // creates deckId used in useEffect\n    const params = useParams();\n    const deckId = params.deckId;\n    const history = useHistory();\n\n    // initial form data\n    const initialDeckData = {\n        name: \"\",\n        description: \"\",\n        id: deckId\n    }\n\n    // creates a state for the form data (deckData), and a state for the current deck (deck)\n    const [deckData, setDeckData] = useState({...initialDeckData})\n    const [deck, setDeck] = useState({});\n\n    // loads deck\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        async function loadDeck() {\n            try {\n                const response = await readDeck(deckId);\n                setDeck(response);\n            } catch(error) {\n                console.log(error);\n            }\n        }\n\n        loadDeck();\n\n        return () => abortController.abort();\n    }, [deckId])\n\n    // changes deckData upon change in form\n    const handleChange = ({target}) => {\n        setDeckData({\n            ...deckData,\n            [target.name]: target.value\n        })\n    }\n\n    // updates the deck with the new deckData and takes user back to deckscreen\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        updateDeck(deckData);\n        history.push(`/decks/${deckId}`);\n    }\n\n    // loading screen\n    if (!deck.cards) {\n        return (\n            <h1>Loading...</h1>\n        )\n    }\n\n    // html\n    return (\n        <div>\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\"><Link to=\"/\">Home</Link></li>\n                    <li className=\"breadcrumb-item\"><Link to=\"\">{deck.name}</Link></li>\n                    <li className=\"breadcrumb-item active\">Edit Deck</li>\n                </ol>\n            </nav>\n            <h3>Edit Deck</h3>\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Name</label>\n                    <input \n                        type=\"text\" \n                        className=\"form-control\" \n                        id=\"name\" \n                        name=\"name\"\n                        onChange={handleChange}\n                        value={deckData.name}\n                        placeholder={deck.name} />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"description\">Description</label>\n                    <textarea \n                        className=\"form-control\" \n                        id=\"description\" \n                        name=\"description\"\n                        onChange={handleChange}\n                        value={deckData.description}\n                        placeholder={deck.description} />\n                </div>\n                <div className=\"d-flex flex-row\">\n                    <Link to={`/decks/${deck.id}`} className=\"btn btn-secondary mr-2\">Cancel</Link>\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default EditDeck;","import React, {useState} from \"react\";\nimport {Link, useHistory} from \"react-router-dom\";\nimport { createCard } from \"../../utils/api\";\n\nfunction Form({deck, cardFront, cardBack, formType}) {\n\n    // TODO: make sure the form values start with the current card data\n    // TODO: properly add and edit cards using the API\n\n    // initial form data\n    const initialCardData = {\n        front: cardFront,\n        back: cardBack\n    }\n    // creates a state for the card form data \n    const [cardData, setCardData] = useState({...initialCardData});\n    //const history = useHistory();\n\n    // sets the cardData to the target value when the value of the form changes\n    const handleChange = ({target}) => {\n        setCardData({\n            ...cardData,\n            [target.name]: target.value\n        })\n        console.log(cardData)\n    }\n\n    // when the user submits, it adds/edits a card based on the cardData\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        if (formType === \"add\") {\n            createCard(cardData);\n            setCardData({...initialCardData})\n            //history.push(`decks/${deck.id}`)\n        }\n    }\n\n    //html\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n                <label htmlFor=\"front\">Front</label>\n                <textarea \n                    className=\"form-control\" \n                    id=\"front\" \n                    name=\"front\"\n                    value={cardData.front}\n                    onChange={handleChange}\n                    placeholder=\"Front side of card\" />\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"back\">Back</label>\n                <textarea\n                    className=\"form-control\" \n                    id=\"back\" \n                    name=\"back\"\n                    value={cardData.back}\n                    onChange={handleChange}\n                    placeholder=\"Back side of card\" />\n            </div>\n            <div className=\"d-flex flex-row\">\n                <Link to={`/decks/${deck.id}`} className=\"btn btn-secondary mr-2\">Done</Link>\n                <button type=\"submit\" className=\"btn btn-primary\">Save</button>\n            </div>\n        </form>\n    )\n}\n\nexport default Form;","import React, { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { readDeck, readCard } from \"../../utils/api\";\nimport Form from \"./Form\";\n\n// edit card page\nfunction EditCard() {\n    // creates a deckId and cardId based on the params\n    const params = useParams();\n    const deckId = params.deckId;\n    const cardId = params.cardId;\n\n    // creates a state for the current deck, and a state for the current card\n    const [deck, setDeck] = useState({});\n    const [card, setCard] = useState({});\n\n    // loads the deck and loads the card\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        async function loadDeck() {\n            try {\n                const response = await readDeck(deckId);\n                setDeck(response);\n            } catch(error) {\n                console.log(error);\n            }\n        }\n\n        async function loadCard() {\n            try {\n                const response = await readCard(cardId);\n                setCard(response);\n            } catch(error) {\n                console.log(error);\n            }\n        }\n\n        loadDeck();\n        loadCard();\n\n        return () => abortController.abort();\n    }, [deckId, cardId])\n\n    // loading screen\n    if (!deck.cards) {\n        return (\n            <h1>Loading...</h1>\n        )\n    }\n \n    // html -- uses Form componet\n    return (\n        <div>\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\"><Link to=\"/\">Home</Link></li>\n                    <li className=\"breadcrumb-item\"><Link to={`/decks/${deck.id}`}>Deck {deck.name}</Link></li>\n                    <li className=\"breadcrumb-item active\">Edit Card {cardId}</li>\n                </ol>\n            </nav>\n            <h3>Edit Card</h3>\n            <Form deck={deck} cardFront={card.front} cardBack={card.back} formType=\"edit\"/>\n        </div>\n    )\n}\n\nexport default EditCard;","import React, { useState, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api\";\nimport Form from \"./Form\";\n\nfunction AddCard() {\n    // crates a deckId based on the params\n    const params = useParams();\n    const deckId = params.deckId;\n\n    // creates a state for the current deck\n    const [deck, setDeck] = useState({});\n\n    // loads the deck\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        async function loadDeck() {\n            try {\n                const response = await readDeck(deckId);\n                setDeck(response);\n            } catch(error) {\n                console.log(error);\n            }\n        }\n\n        loadDeck();\n        return () => abortController.abort();\n    }, [deckId])\n\n    // loading screen\n    if (!deck.cards) {\n        return (\n            <h1>Loading...</h1>\n        )\n    }\n\n    // html -- uses Form component\n    return (\n        <div>\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\"><Link to=\"/\">Home</Link></li>\n                    <li className=\"breadcrumb-item\"><Link to={`/decks/${deck.id}`}>{deck.name}</Link></li>\n                    <li className=\"breadcrumb-item active\">Add Card</li>\n                </ol>\n            </nav>\n            <h3>{deck.name}: Add Card</h3>\n            <Form deck={deck} cardFront=\"\" cardBack=\"\" formType=\"add\"/>\n        </div>\n    )\n}\n\nexport default AddCard;","import React, { Fragment } from \"react\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Decks from \"./Home/DeckList\";\nimport Study from \"./Study/Study\";\nimport CreateDeck from \"./CreateDeck/CreateDeck\";\nimport Deck from \"./Deck/Deck\";\nimport EditDeck from \"./EditDeck/EditDeck\";\nimport EditCard from \"./ModifyCard/EditCard\";\nimport AddCard from \"./ModifyCard/AddCard\";\nimport { Route, Switch } from \"react-router-dom\";\n\n// app\nfunction Layout() {\n\n  // all routes for Layout\n  return (\n    <Fragment>\n      <Header />\n      <div className=\"container col-8 mb-5\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Decks />\n          </Route>\n\n          <Route path=\"/decks/:deckId/study\">\n            <Study />\n          </Route>\n\n          <Route path=\"/decks/new\">\n            <CreateDeck />\n          </Route>\n\n          <Route exact path=\"/decks/:deckId\">\n            <Deck />\n          </Route>\n\n          <Route path=\"/decks/:deckId/edit\">\n            <EditDeck />\n          </Route>\n\n          <Route path=\"/decks/:deckId/cards/new\">\n            <AddCard />\n          </Route>\n\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <EditCard />\n          </Route>\n            \n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}